#javascript solution:
## Runtime: 80 ms, faster than 66.67% of JavaScript online submissions for Two Sum.
## Memory Usage: 37.7 MB, less than 16.71% of JavaScript online submissions for Two Sum.
var twoSum = function(nums, target) {
    var map={}
    for(var i=0;i<nums.length;i++){
        if(nums[i] in map){
            return [map[nums[i]],i]
        }else{
            map[target-nums[i]]=i            
        }
    }
};

#same solution in Java:
## Runtime: 3 ms, faster than 64.28% of Java online submissions for Two Sum.
## Memory Usage: 39.6 MB, less than 53.04% of Java online submissions for Two Sum.
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
        for(int i=0;i<nums.length;i++){
            int curr=nums[i];
            if(map.containsKey(curr)){
                return new int[] {map.get(curr),i};
            }
            map.put(target-curr, i);
        }
        return new int[] {-1,-1};
    }
   
